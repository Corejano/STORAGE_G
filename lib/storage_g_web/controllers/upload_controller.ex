defmodule StorageGWeb.UploadController do
  @moduledoc """
  –ü—Ä–∏–Ω–∏–º–∞–µ—Ç multipart-–∑–∞–≥—Ä—É–∑–∫—É, —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ –ø–∞–ø–∫–∞–º:
  uploads/<ext>/<size_bucket>/UUID_original.ext

  size_bucket:
    - small   (< 10 –ú–ë)
    - medium  (< 500 –ú–ë)
    - large   (>= 500 –ú–ë)
  """

  use StorageGWeb, :controller

  require Logger
  alias StorageG.Repo
  alias StorageG.Files.File, as: FileRecord

  @upload_root Path.expand("uploads", File.cwd!())

  # ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî‚Äî‚Äî

  # –ë–∞–∫–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É
  defp size_bucket(size) when is_integer(size) do
    cond do
      size < 10_000_000 -> "small"
      size < 500_000_000 -> "medium"
      true -> "large"
    end
  end

  # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ç–æ—á–∫–∏, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
  defp ext_of(filename) do
    filename
    |> Path.extname()
    |> String.trim_leading(".")
    |> String.downcase()
    |> case do
      "" -> "bin"
      x -> x
    end
  end

  # –ü–æ—Ç–æ–∫–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ tmp –≤ –∏—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å
  @dialyzer {:no_return, stream_copy!: 2}
  defp stream_copy!(src, dest) do
    File.mkdir_p!(Path.dirname(dest))

    # —á–∏—Ç–∞–µ–º chunks –ø–æ ~1 –ú–ë
    src_stream = File.stream!(src, [], 1_048_576)
    dest_stream = File.stream!(dest, [:write, :binary])

    src_stream
    |> Stream.into(dest_stream)
    |> Stream.run()

    :ok
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
  defp max_file_size() do
    Application.get_env(:storage_g, StorageG.Uploads)[:max_file_size] || 500_000_000
  end

  # ‚Äî‚Äî‚Äî –≠–∫—à–µ–Ω—ã ‚Äî‚Äî‚Äî

  def create(
        conn,
        %{"file" => %Plug.Upload{filename: filename, path: tmp_path} = upload} = params
      ) do
    # –°—Ç–∞—Ç tmp-—Ñ–∞–π–ª–∞ (–µ–≥–æ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª Plug)
    {:ok, stat} = File.stat(tmp_path)
    size = stat.size

    # –ë–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ –¥–∞—ë–º –≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ API)
    if size > max_file_size() do
      return_error(
        conn,
        :bad_request,
        "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –õ–∏–º–∏—Ç API: #{max_file_size()} –±–∞–π—Ç."
      )
    else
      # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ –ø–∞–ø–∫–∞–º
      ext = ext_of(filename)
      bucket = size_bucket(size)

      unique_name = "#{Ecto.UUID.generate()}_#{filename}"
      save_dir = Path.join([@upload_root, ext, bucket])
      dest_path = Path.join(save_dir, unique_name)

      # –ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–ø–∏—Å—å
      :ok = stream_copy!(tmp_path, dest_path)

      description = Map.get(params, "description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
      mime_type = upload.content_type || "application/octet-stream"

      # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      file_attrs = %{
        filename: filename,
        path: dest_path,
        description: description,
        size: size,
        mime_type: mime_type,
        uploaded_at: NaiveDateTime.utc_now() |> NaiveDateTime.truncate(:second),
        hash: "pending",
        owner_id: Ecto.UUID.generate()
      }

      case %FileRecord{} |> FileRecord.changeset(file_attrs) |> Repo.insert() do
        {:ok, file} ->
          # —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å files
          job = StorageG.Workers.ProcessFile.new(%{"file_id" => file.id})
          {:ok, _oban_job} = Oban.insert(StorageG.Oban, job)

          Logger.info("üì¶ Added job for file #{file.id} to Oban queue :files")

          Phoenix.PubSub.broadcast(StorageG.PubSub, "files:updates", {:new_file, file})

          json(conn, %{
            status: "ok",
            file_id: file.id,
            filename: file.filename,
            size: file.size,
            mime_type: file.mime_type,
            message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–¥–∞—á–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
          })

        {:error, changeset} ->
          return_error(conn, :bad_request, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", changeset.errors)
      end
    end
  end

  def create(conn, _params), do: return_error(conn, :bad_request, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")

  # ‚Äî‚Äî‚Äî –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–± –æ—à–∏–±–∫–µ ‚Äî‚Äî‚Äî

  defp return_error(conn, status, message, details \\ nil) do
    body =
      if is_nil(details) do
        %{error: message}
      else
        %{error: message, details: details}
      end

    conn
    |> put_status(status)
    |> json(body)
  end
end
